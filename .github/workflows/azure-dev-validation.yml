name: Azure Template Validation
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - vee-pipeline-fixes
permissions: 
  contents: read 
  id-token: write 
  pull-requests: write 
jobs:
  template_validation_job:
    runs-on: ubuntu-latest
    environment: validation
    name: Template validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pre-flight secret check
        id: secret_check
        run: |
          # GitHub Actions expressions are evaluated before the shell loop runs, so we cannot
          # index into secrets dynamically like secrets[format('{0}', var)]. Instead, check each explicitly.
          missing=0
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then echo "::error::Required secret AZURE_CLIENT_ID is missing." >&2; missing=1; fi
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then echo "::error::Required secret AZURE_TENANT_ID is missing." >&2; missing=1; fi
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then echo "::error::Required secret AZURE_SUBSCRIPTION_ID is missing." >&2; missing=1; fi
          if [ -z "${{ secrets.AZURE_LOCATION }}" ]; then echo "::warning::AZURE_LOCATION not set; defaulting to eastus for validation context."; echo "AZURE_LOCATION=eastus" >> $GITHUB_ENV; else echo "AZURE_LOCATION=${{ secrets.AZURE_LOCATION }}" >> $GITHUB_ENV; fi
          if [ "$missing" -eq 1 ]; then
            echo "Missing required secrets. Failing early." >&2
            exit 1
          fi
          echo "All required auth secrets present (client secret not required for OIDC)."

      - name: Ensure Bicep CLI installed
        run: |
          az bicep install || true
          echo "Bicep version:"; az bicep version || echo "Bicep not available" >&2

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Debug Azure context
        run: |
          az account show || echo "Could not show account (ensure privileges)" >&2
          echo "Listing bicep version:"; az bicep version || true
          echo "Listing repo root:"; ls -1 . || true
          echo "Infra directory content:"; ls -1 infra || true
          echo "Resolved AZURE_LOCATION: ${AZURE_LOCATION:-unset}" 

      - name: Validate Azure Template
        id: validation
        uses: microsoft/template-validation-action@main
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_LOCATION: ${{ secrets.AZURE_LOCATION }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Capture validation output
        id: capture
        run: |
          out="${{ steps.validation.outputs.resultFile }}"
            if [ -n "$out" ] && [ -f "$out" ]; then
              cp "$out" validation-result.json
            else
              echo '{"warning":"No resultFile produced by action"}' > validation-result.json
            fi
          echo "result_path=validation-result.json" >> $GITHUB_OUTPUT

      - name: Print validation result
        if: always()
        run: |
          echo "--- validation-result.json ---"
          cat validation-result.json || echo "No validation-result.json present" >&2

      - name: Upload validation result artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-result
          path: validation-result.json
          retention-days: 7

      - name: Fail if validation errors detected
        run: |
          file='validation-result.json'
          if [ ! -f "$file" ]; then
            echo "No validation result file produced; failing." >&2
            exit 1
          fi
          if grep -Ei '"(status|level)" *: *"error"' "$file" || grep -Ei '\b(error|failed)\b' "$file"; then
            echo "Errors detected in template validation output." >&2
            cat "$file"
            exit 1
          fi
          # Also treat underlying action non-zero exit as failure even if heuristic passes.
          if [ "${{ steps.validation.outcome }}" = "failure" ]; then
            echo "Underlying validation action reported failure (steps.validation.outcome)." >&2
            exit 1
          fi
          echo "No blocking errors detected in validation output."
